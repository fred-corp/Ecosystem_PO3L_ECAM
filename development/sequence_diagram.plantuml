@startuml sequence_diagram
skinparam backgroundcolor transparent

participant webGUI
participant server
participant sim
participant ecoSymFunctions
participant Herbivore
participant Carnivore
participant Plant
participant Meat
participant OrganicWaste


webGUI -> server: post JSON
server -> sim: send JSON object containing ecosystem data
sim -> sim: create ecosystem with appropiate size
sim -> ecoSymFunctions: create grid of entities
ecoSymFunctions -> sim: grid
sim -> ecoSymFunctions: add population to ecosystem
ecoSymFunctions -> sim: loaded ecosystem
loop for each entity
	sim -> ecoSymFunctions: ecosystem, entity, grid data
	alt type of entity
	else Animal
		alt age > lifespan
      ecoSymFunctions --> sim : remove_object(object)
      ecoSymFunctions -> Animal !! : << destroy >>
      ecoSymFunctions -> Meat : << create >>
      ecoSymFunctions --> sim : add(Meat)
    end
    alt energy_points is 0
      alt health_points
        else health_points > 0
          Animal -> Animal : modify_health_points(-1)
          Animal -> Animal : modify_energy(HPFPEquivalence)
        else health_points <= 0
          ecoSymFunctions --> sim : remove_object(object)
          ecoSymFunctions -> Animal !! : << destroy >>
          ecoSymFunctions -> Meat : << create >>
          ecoSymFunctions --> sim : add(Meat)
      end
    end
    alt eat_meat()
      else True
        alt found prey
          Carnivore -> Herbivore : modify_health_points(-1)
          Carnivore -> Carnivore : modify_energy(-2)
        end
    end
    alt eat_meat()
      else True
        alt food in contact_zone
          Carnivore -> Meat : modify_health_points(-hunger)
          Carnivore -> Carnivore : modify_energy(hunger)
        end
      else False
        alt food in contact_zone
          Herbivore -> Plant : modify_health_points(-hunger)
          Herbivore -> Herbivore : modify_energy(hunger)
        end
    end
    alt partner in contact_zone
      Animal -> Animal : isPregnant = 1
      Animal -> Animal : modify_energy(-2)
      Animal -> Animal : gestationCooldown = gestationCooldown
    end
    alt is pregnant
      alt gestationCooldown 
      else gestationCooldown = 0
        ecoSymFunctions -> Animal : << create >> in contact_zone
        ecoSymFunctions --> sim : add(Animal)
        Animal -> Animal : isPregnant = 0
      else gestationCooldown > 0
        Animal -> Animal : isPregnant = 1
      end
    end
    ecoSymFunctions -> OrganicWaste : << create >> in contact_zone
    ecoSymFunctions --> sim : add(OrganicWaste)
    alt move
    else partner in vision_zone
      
    else food in vision_zone
      Animal -> Animal : move to target
    else prey in vision_zone
      Animal -> Animal : move to target
    else random
      Animal -> Animal : random move
    end
  Animal -> Animal : increase_age()
  Animal -> Animal : modify_energy(-1)
	else Plant
    alt age > lifespan
      ecoSymFunctions --> sim : remove_object(object)
      ecoSymFunctions -> Animal !! : << destroy >>
      ecoSymFunctions -> OrganicWaste : << create >>
      ecoSymFunctions --> sim : add(OrganicWaste)
    end
    alt energy_points is 0
      alt health_points
        else health_points > 0
          Animal -> Animal : modify_health_points(-1)
          Animal -> Animal : modify_energy(HPFPEquivalence)
        else health_points <= 0
          ecoSymFunctions --> sim : remove_object(object)
          ecoSymFunctions -> Animal !! : << destroy >>
          ecoSymFunctions -> OrganicWaste : << create >>
          ecoSymFunctions --> sim : add(OrganicWaste)
      end
    end
    alt age > adultAt
        alt seed_cooldown <= 0
          ecoSymFunctions -> Plant : << create >> in seed_zone
          ecoSymFunctions --> sim : add(Plant)
        end
        Plant -> Plant : seed_cooldown -= 1
    end
    Plant -> Plant : increase_age()
    Plant -> Plant : modify_energy(-1)
	else Meat
		alt age > rotsAt
      ecoSymFunctions --> sim : remove_object(object)
      ecoSymFunctions -> Meat !! : << destroy >>
      ecoSymFunctions -> organicWaste : << create >>
      ecoSymFunctions --> sim : add(organicWaste)
    end
    alt energy_points is 0
      alt health_points
        else health_points > 0
          Animal -> Animal : modify_health_points(-1)
          Animal -> Animal : modify_energy(HPFPEquivalence)
        else health_points <= 0
          ecoSymFunctions --> sim : remove_object(object)
          ecoSymFunctions -> Meat !! : << destroy >>
          ecoSymFunctions -> OrganicWaste : << create >>
          ecoSymFunctions --> sim : add(OrganicWaste)
      end 
    end
  Meat -> Meat : increase_age()
  Meat -> Meat : modify_energy(-1)
	else OrganicWaste
		alt energy_points <= 0
      ecoSymFunctions --> sim : remove_object(object)
      ecoSymFunctions -> OrganicWaste !! : << destroy >>
    end
	end
	ecoSymFunctions -> sim: updated ecosystem
end
sim -> ecoSymFunctions: create JSON object with updated ecosystem
ecoSymFunctions -> sim: new JSON object
sim -> server: new JSON object
server -> webGUI: respond with new JSON object
webGUI -> webGUI: update visualisation grid

@enduml